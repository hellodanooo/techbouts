// pages/components/FighterForm.tsx
// this component should create the fighter and pass to the root screen to submit to roster
'use client';
import React, { useState, useEffect } from 'react';
import { collection, query, where, getDocs, QueryDocumentSnapshot, DocumentData } from 'firebase/firestore';
import { db } from '@/lib/firebase_techbouts/config';
import { LocalizationProvider } from '@mui/x-date-pickers';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import dayjs from 'dayjs';
import { Card, CardContent, CardDescription, CardHeader, CardTitle, } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue, } from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";


interface FighterFormData {
  // Basic Information
  first: string;
  last: string;
  email: string;
  dob: string;
  age: number;
  gender: string;
  fighter_id: string;

  // Gym Information
  gym: string;
  gym_id: string;
  coach_name: string;
  coach_email: string;
  coach_phone: string;

  // Location Information
  state: string;
  city: string;


  // Physical Information

  weightclass: number;
  height: number;
  heightFoot: number;
  heightInch: number;

  // Record
  mt_win: number;
  mt_loss: number;
  boxing_win: number;
  boxing_loss: number;
  mma_win: number;
  mma_loss: number;
  pmt_win: number;
  pmt_loss: number;


  // Legacy fields (maintained for compatibility)
  win: number;
  loss: number;
  ammy: number;

  // Experience & Classification
  years_exp: number;

  // Contact Information
  phone: string;

  // Additional Information
  other: string;
}

interface FighterFormProps {
  onFormDataChange: (data: FighterFormData) => void;
  locale?: string;
  user?: string;
  source?: string;
}



const FighterForm: React.FC<FighterFormProps> = ({ onFormDataChange, locale, user, source }) => {

  const [emailError, setEmailError] = useState<string | null>(null);
  const [selectedDate, setSelectedDate] = useState<dayjs.Dayjs | null>(null);
  const [isWaiverChecked, setIsWaiverChecked] = useState(false);



  const [formLabels] = useState({
    returningAthletes: 'RETURNING ATHLETES',
    doubleCheckInfo: '(double check your information)',
    searchByEmail: 'SEARCH BY EMAIL',
    searchByLastName: 'SEARCH BY LAST NAME',
    newAthletes: 'New Athletes can fill the Form Manually',
    firstName: 'FIRST NAME',
    lastName: 'LAST NAME',
    gym: 'GYM',
    searchingGyms: 'Searching...',
    noGymsFound: 'None found, please enter Gym Name',
    selectWeightClass: 'Select Weight Class',
    height: 'Height',
    foot: 'Foot',
    inches: 'Inches',
    selectGender: 'Select Gender',
    male: 'Male',
    female: 'Female',
    dateFormat: 'MM/DD/YYYY',
    ammateurFights: 'Number of Amateur Full contact Fights',
    yearsTraining: 'Years Training',
    underYear: 'Under a Year',
    otherExperience: locale === 'es' ?
      'Other Experience' :
      'Other experience (Amateur, Smokers, etc.)',
    other: 'OTHER',
    athleteEmail: 'Please enter athletes own email',
    email: 'EMAIL',
    phoneNumber: 'PHONE NUMBER',
    coachName: 'COACH NAME',
    coachPhone: 'COACH PHONE NUMBER',
    autogenerated: '(autogenerated fields below)',
    age: 'Age',
    pmtId: 'PMT ID',
    pmtScore: 'PMT Score',
    win: 'WIN',
    questions: 'Any questions? submit registration and reply to email'
  });



  const lbsToKg = (lbs: number): string => {
    const kg = lbs * 0.453592;
    return kg.toFixed(1);
  };



  const weightClasses = [
    { lbs: 60, kg: lbsToKg(60) },
    { lbs: 65, kg: lbsToKg(65) },
    { lbs: 70, kg: lbsToKg(70) },
    { lbs: 75, kg: lbsToKg(75) },
    { lbs: 80, kg: lbsToKg(80) },
    { lbs: 90, kg: lbsToKg(90) },
    { lbs: 95, kg: lbsToKg(95) },
    { lbs: 100, kg: lbsToKg(100) },
    { lbs: 108, kg: lbsToKg(108) },
    { lbs: 112, kg: lbsToKg(112) },
    { lbs: 117, kg: lbsToKg(117) },
    { lbs: 122, kg: lbsToKg(122) },
    { lbs: 127, kg: lbsToKg(127) },
    { lbs: 132, kg: lbsToKg(132) },
    { lbs: 137, kg: lbsToKg(137) },
    { lbs: 142, kg: lbsToKg(142) },
    { lbs: 147, kg: lbsToKg(147) },
    { lbs: 153, kg: lbsToKg(153) },
    { lbs: 159, kg: lbsToKg(159) },
    { lbs: 165, kg: lbsToKg(165) },
    { lbs: 172, kg: lbsToKg(172) },
    { lbs: 179, kg: lbsToKg(179) },
    { lbs: 186, kg: lbsToKg(186) },
    { lbs: 195, kg: lbsToKg(195) },
    { lbs: 215, kg: lbsToKg(215) },
    { lbs: 235, kg: lbsToKg(235) },
    { lbs: 300, kg: lbsToKg(300) }
  ];



  const cmToFeetAndInches = (cm: number): { feet: number; inches: number } => {
    const totalInches = cm / 2.54;
    const feet = Math.floor(totalInches / 12);
    const inches = Math.round(totalInches % 12);
    return { feet, inches };
  };





  const heightOptions = {
    feet: [
      { value: 0, label: 'Foot' },
      { value: 4, label: '4 ft' },
      { value: 5, label: '5 ft' },
      { value: 6, label: '6 ft' }
    ],
    inches: Array.from({ length: 12 }, (_, i) => ({
      value: i,
      label: i.toString()

    })),

    centimeters: Array.from({ length: 121 }, (_, i) => i + 120).map(cm => ({  // 120cm to 240cm
      value: cm,
      label: `${cm} cm`
    }))

  };




  const handleDateChange = (date: dayjs.Dayjs | null) => {
    if (date) {
      const formattedDate = date.format('MM/DD/YYYY');
      setFormData({
        ...formData,
        dob: formattedDate,
        age: calculateAge(formattedDate),
        fighter_id: formData.first && formData.last ? generateFighterId(formData.first, formData.last, formattedDate) : formData.fighter_id,
      });
      setSelectedDate(date);
      setDobError(null);
    } else {
      setDobError("Invalid date");
    }
  };


  const [formData, setFormData] = useState<FighterFormData>({
    // Basic Information
    first: '',
    last: '',
    email: user || '',
    dob: '',
    age: 0,
    gender: '',
    fighter_id: '',

    // Gym Information
    gym: '',
    gym_id: '',
    coach_name: '',
    coach_email: '',
    coach_phone: '',

    // Location Information
    state: '',
    city: '',


    // Physical Information

    weightclass: 0,
    height: 0,
    heightFoot: 0,
    heightInch: 0,

    // Record
    mt_win: 0,
    mt_loss: 0,
    boxing_win: 0,
    boxing_loss: 0,
    mma_win: 0,
    mma_loss: 0,
    pmt_win: 0,
    pmt_loss: 0,


    // Legacy fields
    win: 0,
    loss: 0,
    ammy: 0,

    // Experience & Classification
    years_exp: 0,

    // Contact Information
    phone: '',

    // Additional Information
    other: '',
  });


  const [dobError, setDobError] = useState<string | null>(null);
  const dateRegex = /^(0[1-9]|1[0-2])\/(0[1-9]|[12][0-9]|3[01])\/\d{4}$/;

  //////////////////////////////////////////////////////////////////
  /////////////////// GYM SEARCH ///////////////////////////////////////////////
  //const [gymSearchTerm, setGymSearchTerm] = useState<string>('');



  // Update the gym search effect in FighterForm.tsx








  //////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////



  //////////////////////////////////////////////////////////////////
  /////////////////// fighterId SEARCH ///////////////////////////////////////////////
  const [fighterSearchTerm, setFighterSearchTerm] = useState<string>('');
  const [fighterSearchResults, setFighterSearchResults] = useState<FighterFormData[]>([]);
  const [searchType, setSearchType] = useState<'email' | 'last'>('email');

  useEffect(() => {
    
    const fetchFighters = async () => {
      if (fighterSearchTerm.length >= 3) {
        console.log(`Searching for ${searchType} containing:`, fighterSearchTerm);

        try {
          // Create a query that searches for emails containing the search term (case-insensitive)
          const colRef = collection(db, 'techbouts_fighters');
          let optimizedSearchTerm = fighterSearchTerm;
          // For email, we want to use lowercase to match most common storage patterns
          if (searchType === 'email') {
            optimizedSearchTerm = fighterSearchTerm.toLowerCase();
          }
          if (searchType === 'last') {
            optimizedSearchTerm = fighterSearchTerm.toUpperCase();
          }

          const fightersQuery = query(
            colRef,
            where(searchType, '>=', optimizedSearchTerm),
            where(searchType, '<=', optimizedSearchTerm + '\uf8ff')
          );

          console.log('Executing query...');
          const querySnapshot = await getDocs(fightersQuery);
          console.log('Query returned', querySnapshot.size, 'results');

          // Even if we get results with the lowercase search, we should also try with original case
          // to ensure we catch all possible matches (for any values stored with mixed case)
          const originalCaseQuery = query(
            colRef,
            where(searchType, '>=', fighterSearchTerm),
            where(searchType, '<=', fighterSearchTerm + '\uf8ff')
          );

          const originalCaseSnapshot = await getDocs(originalCaseQuery);
          console.log('Original case query returned', originalCaseSnapshot.size, 'results');

          // Combine both sets of results (will automatically remove duplicates by document ID)
          const combinedResults = new Map();

          // Helper function to map document data to our FighterFormData type
          const mapDocToFighterData = (doc: QueryDocumentSnapshot<DocumentData>): FighterFormData => {
            const data = doc.data();
            return {
              first: data.first || '',
              last: data.last || '',
              email: data.email || '',
              dob: data.dob || '',
              gym: data.gym || '',
              age: data.age || 0,
              weightclass: data.weightclass || 0,
              fighter_id: data.fighter_id || '',
              win: data.win || 0,
              loss: data.loss || 0,
              mt_win: data.mt_win || 0,
              mt_loss: data.mt_loss || 0,
              boxing_win: data.boxing_win || 0,
              boxing_loss: data.boxing_loss || 0,
              mma_win: data.mma_win || 0,
              mma_loss: data.mma_loss || 0,
              pmt_win: data.pmt_win || 0,
              pmt_loss: data.pmt_loss || 0,
              gender: data.gender || '',
              other: data.other || '',
              years_exp: data.years_exp || 0,
              ammy: data.ammy || 0,
              height: data.height || 0,
              heightFoot: data.heightFoot || 0,
              heightInch: data.heightInch || 0,
              phone: data.phone || '',
              coach_phone: data.coach_phone || '',
              coach_name: data.coach_name || '',
              coach_email: data.coach_email || '',
              state: data.state || '',
              city: data.city || '',
              gym_id: data.gym_id || '',
            };
          };

          // Add results from lowercase query
          querySnapshot.docs.forEach(doc => {
            combinedResults.set(doc.id, mapDocToFighterData(doc));
          });

          // Add results from original case query
          originalCaseSnapshot.docs.forEach(doc => {
            if (!combinedResults.has(doc.id)) {
              combinedResults.set(doc.id, mapDocToFighterData(doc));
            }
          });

          // Convert Map to Array
          const fighters = Array.from(combinedResults.values());

          // Log for debugging
          console.log('Total combined fighters:', fighters.length);

          // Set the results
          setFighterSearchResults(fighters);
        } catch (error) {
          console.error("Error fetching fighters:", error);
          setFighterSearchResults([]);
        }
      } else {
        setFighterSearchResults([]);
      }
    };

    fetchFighters();
  }, [fighterSearchTerm, searchType]);






  const handleFighterSelect = (selectedFighter: FighterFormData) => {
    console.log('Selected fighter raw data:', selectedFighter);

    // Create a complete fighter object with proper data conversions and defaults
    const updatedFighter: FighterFormData = {
      // Basic Information with defaults for every field
      first: (selectedFighter.first || '').toUpperCase(),
      last: (selectedFighter.last || '').toUpperCase(),
      email: selectedFighter.email || '',
      dob: selectedFighter.dob ? dayjs(selectedFighter.dob).format('MM/DD/YYYY') : '',
      age: typeof selectedFighter.age === 'number' ? selectedFighter.age : (parseInt(selectedFighter.age as unknown as string) || 0),
      gender: selectedFighter.gender || '',
      fighter_id: selectedFighter.fighter_id || '',

      // Gym Information
      gym: selectedFighter.gym || '',
      gym_id: selectedFighter.gym_id || '',
      coach_name: selectedFighter.coach_name || '',
      coach_email: selectedFighter.coach_email || '',
      coach_phone: selectedFighter.coach_phone || '',

      // Location Information
      state: selectedFighter.state || '',
      city: selectedFighter.city || '',

      // Physical Information
      weightclass: typeof selectedFighter.weightclass === 'number' ? selectedFighter.weightclass :
        (parseInt(selectedFighter.weightclass as unknown as string) || 0),
      height: typeof selectedFighter.height === 'number' ? selectedFighter.height :
        (parseInt(selectedFighter.height as unknown as string) || 0),
      heightFoot: typeof selectedFighter.heightFoot === 'number' ? selectedFighter.heightFoot :
        (parseInt(selectedFighter.heightFoot as unknown as string) || 0),
      heightInch: typeof selectedFighter.heightInch === 'number' ? selectedFighter.heightInch :
        (parseInt(selectedFighter.heightInch as unknown as string) || 0),

      // Record fields with numeric conversion
      mt_win: typeof selectedFighter.mt_win === 'number' ? selectedFighter.mt_win :
        (parseInt(selectedFighter.mt_win as unknown as string) || 0),
      mt_loss: typeof selectedFighter.mt_loss === 'number' ? selectedFighter.mt_loss :
        (parseInt(selectedFighter.mt_loss as unknown as string) || 0),
      boxing_win: typeof selectedFighter.boxing_win === 'number' ? selectedFighter.boxing_win :
        (parseInt(selectedFighter.boxing_win as unknown as string) || 0),
      boxing_loss: typeof selectedFighter.boxing_loss === 'number' ? selectedFighter.boxing_loss :
        (parseInt(selectedFighter.boxing_loss as unknown as string) || 0),
      mma_win: typeof selectedFighter.mma_win === 'number' ? selectedFighter.mma_win :
        (parseInt(selectedFighter.mma_win as unknown as string) || 0),
      mma_loss: typeof selectedFighter.mma_loss === 'number' ? selectedFighter.mma_loss :
        (parseInt(selectedFighter.mma_loss as unknown as string) || 0),
      pmt_win: typeof selectedFighter.pmt_win === 'number' ? selectedFighter.pmt_win :
        (parseInt(selectedFighter.pmt_win as unknown as string) || 0),
      pmt_loss: typeof selectedFighter.pmt_loss === 'number' ? selectedFighter.pmt_loss :
        (parseInt(selectedFighter.pmt_loss as unknown as string) || 0),

      // Legacy fields
      win: typeof selectedFighter.win === 'number' ? selectedFighter.win :
        (parseInt(selectedFighter.win as unknown as string) || 0),
      loss: typeof selectedFighter.loss === 'number' ? selectedFighter.loss :
        (parseInt(selectedFighter.loss as unknown as string) || 0),
      ammy: typeof selectedFighter.ammy === 'number' ? selectedFighter.ammy :
        (parseInt(selectedFighter.ammy as unknown as string) || 0),

      // Experience & Classification
      years_exp: typeof selectedFighter.years_exp === 'number' ? selectedFighter.years_exp :
        (parseInt(selectedFighter.years_exp as unknown as string) || 0),

      // Contact Information
      phone: selectedFighter.phone || '',

      // Additional Information
      other: selectedFighter.other || '',
    };

    // Handle height conversion if needed
    if (updatedFighter.heightFoot === 0 && updatedFighter.heightInch === 0 && updatedFighter.height > 0) {
      updatedFighter.heightFoot = Math.floor(updatedFighter.height / 12);
      updatedFighter.heightInch = updatedFighter.height % 12;
    }

    console.log('Processed fighter data:', updatedFighter);

    // Parse the date for DatePicker - only if dob exists and is valid
    if (updatedFighter.dob) {
      try {
        const dateValue = dayjs(updatedFighter.dob, 'MM/DD/YYYY');
        if (dateValue.isValid()) {
          console.log('Setting date picker to:', dateValue.format('MM/DD/YYYY'));
          setSelectedDate(dateValue);
        } else {
          console.error('Invalid date format:', updatedFighter.dob);
          setSelectedDate(null);
        }
      } catch (e) {
        console.error('Error parsing date:', e);
        setSelectedDate(null);
      }
    }

    // Update form data - IMPORTANT: do this synchronously before the next step
    setFormData(updatedFighter);

    // Notify parent component about the updated data
    console.log('Calling onFormDataChange with:', updatedFighter);
    onFormDataChange(updatedFighter);

    // Clear search results
    setFighterSearchResults([]);
    setFighterSearchTerm('');
  };

  //////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////

  const generateFighterId = (firstName: string, lastName: string, dob: string): string => {
    const [month, day, year] = dob.split('/');
    return `${firstName.trim().replace(/\s/g, '').toUpperCase()}${lastName.trim().replace(/\s/g, '').toUpperCase()}${day}${month}${year}`;
  };


  const calculateAge = (dob: string): number => {
    const birthDate = dayjs(dob);
    const today = dayjs();
    return today.diff(birthDate, 'year');
  };


  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    const upperCaseValue = value.toUpperCase();

    // Instead of using setFormData with a callback, create the new data first
    const newFormData = { ...formData };

    switch (name) {
      case "weightclass":
        newFormData.weightclass = parseInt(value, 10) || 0;
        break;
      case "age":
        newFormData.age = parseInt(value, 10) || 0;
        break;
      case "dob":
        newFormData.dob = value;
        if (dateRegex.test(value)) {
          newFormData.age = calculateAge(value);
          if (newFormData.first && newFormData.last) {
            newFormData.fighter_id = generateFighterId(newFormData.first, newFormData.last, value);
          }
        } else {
          setDobError("Date must be in MM/DD/YYYY format");
        }
        break;

      case "email":
        newFormData.email = value;
        if (value.toLowerCase().includes('@example.com')) {
          setEmailError("Please enter a valid email address");
        } else {
          setEmailError(null);
        }
        break;

      default:
        if (name in newFormData) {
          (newFormData[name as keyof FighterFormData] as string) = upperCaseValue;
        }

        if (name === 'first' || name === 'last') {
          if (newFormData.first && newFormData.last && newFormData.dob) {
            newFormData.fighter_id = generateFighterId(newFormData.first, newFormData.last, newFormData.dob);
          }
        }
        break;
    }

    // Set the state once with the new data
    setFormData(newFormData);
    // Call onFormDataChange directly with the new data
    onFormDataChange(newFormData);
  };


  const maxYear = dayjs().subtract(5, 'year');
  const minYear = dayjs().subtract(100, 'year');

  useEffect(() => {
    if (source === 'add-fighter-modal') {
      setIsWaiverChecked(true);
    }
  }, [source]);

  return (
    <LocalizationProvider dateAdapter={AdapterDayjs}>
      <form className="space-y-6">
        {/* Waiver Section */}

        {source !== 'add-fighter-modal' && (

          <Card>
            <CardHeader>
              <CardTitle>Waiver and Release Agreement</CardTitle>
            </CardHeader>
            <CardContent>

              <ScrollArea className="h-[200px] rounded-md border p-4">
                {/* Waiver content */}
                <div className="space-y-4 text-sm">
                  <p>
                    I, the competitor named below, and/or the legal guardian of the competitor, by submitting this application, acknowledge, understand, and agree to the following:
                  </p>

                  <p>
                    <strong>1. Assumption of Risk & Liability Release</strong><br />
                    I voluntarily participate in events organized by <strong>IKF Point Muay Thai</strong> and <strong>Point Boxing Sparring Circuit</strong>, hosted on <strong>pmt-west.app</strong> and <strong>pmtwest.org</strong>, operated by <strong>Ryan Hodges, and Rafael Mendoza, and Daniel Hodges</strong> and originally founded by <strong>Johnny Davis Enterprises DBA (AK Promotions)</strong> and recognize the continued involvement of various promoters, officials, and organizations.
                  </p>

                  <p>
                    I fully understand and accept that participation in Muay Thai/Kickboxing and combat sports involves inherent risks, including but not limited to,
                    <strong>serious injury, permanent disability, paralysis, or death</strong>. I hereby release and discharge all individuals and entities listed above from any liability, claims, or demands arising from my participation in any event.
                  </p>

                  <p>
                    <strong>2. Data Usage & Digital Consent</strong><br />
                    I acknowledge that my personal information, fight records, and participation details may be stored on <strong>PMT-West.app</strong>, <strong>TechBouts.com</strong> and <strong>ikffightplatform.com</strong> for event management, matchmaking, and competition records.
                  </p>

                  <p>
                    <strong>3. Media Release & Publicity Consent</strong><br />
                    I grant <strong>IKF Point Muay Thai League, PMT-West.app, TechBouts.com</strong> full rights to use any photographs, videos, live streams, and digital media recorded at any event.
                  </p>

                  <p>
                    <strong>4. Agreement to Rules & Conduct Policy</strong><br />
                    I agree to abide by all <strong>official Muay Thai League rules and regulations</strong>. I acknowledge that any misconduct may result in penalties, disqualification, or suspension from future events.
                  </p>

                  <p>
                    <strong>5. Medical & Insurance Responsibility</strong><br />
                    I affirm that I am <strong>physically and mentally fit</strong> to participate and have adequate medical insurance coverage.
                  </p>

                  <p>
                    <strong>6. Identification & Eligibility</strong><br />
                    I understand that a valid birth certificate or government-issued ID may be required to compete.
                  </p>

                  <p>
                    <strong>7. Refund Policy</strong><br />
                    I agree that any registration fees or ticket sales are <strong>non-refundable</strong>, unless the event is canceled.
                  </p>

                  <p>
                    <strong>8. Parent/Guardian Consent for Minors</strong><br />
                    If the competitor is under the age of 18, a **parent or legal guardian must sign this waiver** on their behalf.
                    By checking the box below and submitting this form, the parent or legal guardian acknowledges that they have read, understood, and agreed to all terms stated in this waiver
                    and accept full responsibility for the minors participation in the event.
                  </p>
                </div>

              </ScrollArea>

              <div className="mt-4 flex items-center space-x-2">
                <Checkbox
                  id="waiver"
                  checked={isWaiverChecked}
                  onCheckedChange={(checked) => setIsWaiverChecked(checked as boolean)}
                />
                <Label htmlFor="waiver" className="text-sm">
                  I have read and agree to the waiver
                  <br />
                  <span className="text-xs text-muted-foreground">
                    (If the competitor is under 18, a parent or legal guardian must agree on their behalf.)
                  </span>
                </Label>
              </div>
            </CardContent>
          </Card>
        )}



        <fieldset disabled={!isWaiverChecked} className="space-y-6">
          {/* Returning Fighter Search */}



          <Card>
            <CardHeader>
              <CardTitle>{formLabels.returningAthletes}</CardTitle>
              <CardDescription>{formLabels.doubleCheckInfo}</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <Tabs defaultValue="email" onValueChange={(value) => setSearchType(value as 'email' | 'last')}>
                  <TabsList className="grid w-full grid-cols-2">
                    <TabsTrigger value="email">Search by Email</TabsTrigger>
                    <TabsTrigger value="last">Search by Last Name</TabsTrigger>
                  </TabsList>
                  <TabsContent value="email" className="space-y-2">
                    <Label htmlFor="emailSearch">Search by Email</Label>
                    <Input
                      id="emailSearch"
                      value={searchType === 'email' ? fighterSearchTerm : ''}
                      onChange={(e) => {
                        const value = e.target.value;
                        setFighterSearchTerm(value);
                        if (value.length < 3) setFighterSearchResults([]);
                      }}
                      placeholder="Enter email address..."
                    />
                  </TabsContent>
                  <TabsContent value="last" className="space-y-2">
                    <Label htmlFor="lastNameSearch">Search by Last Name</Label>
                    <Input
                      id="lastNameSearch"
                      value={searchType === 'last' ? fighterSearchTerm : ''}
                      onChange={(e) => {
                        const value = e.target.value.toUpperCase();
                        setFighterSearchTerm(value);
                        if (value.length < 3) setFighterSearchResults([]);
                      }}
                      placeholder="Enter last name..."
                    />
                  </TabsContent>
                </Tabs>

                {fighterSearchResults.length > 0 && (
                  <ScrollArea className="h-[200px] rounded-md border">
                    <div className="p-4">
                      {fighterSearchResults.map((fighter, index) => (
                        <Button
                          key={index}
                          variant="ghost"
                          className="w-full justify-start"
                          onClick={() => handleFighterSelect(fighter)}
                        >
                          <div className="text-left">
                            <div className="font-medium">{fighter.first} {fighter.last}</div>
                            <div className="text-sm text-muted-foreground">
                              Email: {fighter.email} | Age: {fighter.age} | Gym: {fighter.gym}
                            </div>
                          </div>
                        </Button>
                      ))}
                    </div>
                  </ScrollArea>
                )}
              </div>
            </CardContent>
          </Card>




          {/* New Fighter Form */}
          <Card>
            <CardHeader>
              <CardTitle>New Fighter Registration</CardTitle>
              <CardDescription>{formLabels.newAthletes}</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid gap-6">
                {/* Personal Information */}
                <div className="grid gap-4 sm:grid-cols-2">
                  <div className="space-y-2">
                    <Label htmlFor="first">{formLabels.firstName}</Label>
                    <Input
                      id="first"
                      name="first"
                      value={formData.first.toUpperCase()}
                      onChange={handleInputChange}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="last">{formLabels.lastName}</Label>
                    <Input
                      id="last"
                      name="last"
                      value={formData.last.toUpperCase()}
                      onChange={handleInputChange}
                    />
                  </div>
                </div>

                {/* Gym Information */}
                <div className="space-y-2">
                  <Label htmlFor="gym">{formLabels.gym}</Label>
                  <Input
                    id="gym"
                    name="gym"
                    value={formData.gym} // Use formData.gym instead of gymSearchTerm
                    onChange={handleInputChange}
                    required
                  />
                </div>

                {/* Weight and Height */}
                <div className="grid gap-4 sm:grid-cols-2">
                  <div className="space-y-2">
                    <Label>{formLabels.selectWeightClass}</Label>
                    <Select
                      name="weightclass"
                      value={formData.weightclass.toString()}
                      onValueChange={(value) =>
                        handleInputChange({
                          target: { name: 'weightclass', value }
                        } as React.ChangeEvent<HTMLSelectElement>)
                      }
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select weight class" />
                      </SelectTrigger>
                      <SelectContent>
                        {weightClasses.map(({ lbs, kg }) => (
                          <SelectItem key={lbs} value={lbs.toString()}>
                            {locale === 'es' ? `${lbs} lbs (${kg} kg)` : `${lbs} lbs`}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  {/* Height Selection */}
                  <div className="space-y-2">
                    <Label>{formLabels.height}</Label>
                    <div className="flex space-x-2">
                      {locale === 'es' ? (
                        <Select
                          name="heightCm"
                          value={(formData.heightFoot * 30.48 + formData.heightInch * 2.54).toFixed(0)}
                          onValueChange={(value) => {
                            const cm = parseInt(value);
                            const { feet, inches } = cmToFeetAndInches(cm);
                            handleInputChange({
                              target: { name: 'heightFoot', value: feet.toString() }
                            } as React.ChangeEvent<HTMLInputElement>);
                            handleInputChange({
                              target: { name: 'heightInch', value: inches.toString() }
                            } as React.ChangeEvent<HTMLInputElement>);
                          }}
                        >
                          <SelectTrigger>
                            <SelectValue placeholder="Select height" />
                          </SelectTrigger>
                          <SelectContent>
                            {heightOptions.centimeters.map(({ value, label }) => (
                              <SelectItem key={value} value={value.toString()}>
                                {label}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      ) : (
                        <>
                          <Select
                            name="heightFoot"
                            value={formData.heightFoot.toString()}
                            onValueChange={(value) =>
                              handleInputChange({
                                target: { name: 'heightFoot', value }
                              } as React.ChangeEvent<HTMLSelectElement>)
                            }
                          >
                            <SelectTrigger className="w-[110px]">
                              <SelectValue placeholder="Feet" />
                            </SelectTrigger>
                            <SelectContent>
                              {heightOptions.feet.map(({ value, label }) => (
                                <SelectItem key={value} value={value.toString()}>
                                  {label}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>

                          <Select
                            name="heightInch"
                            value={formData.heightInch.toString()}
                            onValueChange={(value) =>
                              handleInputChange({
                                target: { name: 'heightInch', value }
                              } as React.ChangeEvent<HTMLSelectElement>)
                            }
                          >
                            <SelectTrigger className="w-[110px]">
                              <SelectValue placeholder="Inches" />
                            </SelectTrigger>
                            <SelectContent>
                              {heightOptions.inches.map(({ value }) => (
                                <SelectItem key={value} value={value.toString()}>
                                  {value}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                        </>
                      )}
                    </div>
                  </div>
                </div>

                {/* Date of Birth and Gender */}
                <div className="grid gap-4 sm:grid-cols-2">
                  <div className="space-y-2">
                    <Label>Date of Birth</Label>
                    <DatePicker
                      value={selectedDate}
                      onChange={handleDateChange}
                      minDate={minYear}
                      maxDate={maxYear}
                      slotProps={{
                        textField: {
                          sx: {
                            width: '100%',
                            '& .MuiInputBase-root': {
                              borderRadius: '0.375rem',
                            },
                          },
                        },
                      }}
                    />
                    {dobError && (
                      <p className="text-sm text-destructive">{dobError}</p>
                    )}
                  </div>


                  <div className="space-y-2">
                    <Label>Age</Label>
                    <div className="text-2xl font-bold">{formData.age}</div>
                  </div>


                  <div className="space-y-2">
                    <Label>{formLabels.selectGender}</Label>
                    <Select
                      name="gender"
                      value={formData.gender}
                      onValueChange={(value) =>
                        handleInputChange({
                          target: { name: 'gender', value }
                        } as React.ChangeEvent<HTMLSelectElement>)
                      }
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select gender" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="MALE">{formLabels.male}</SelectItem>
                        <SelectItem value="FEMALE">{formLabels.female}</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                {/* Contact Information */}
                <Separator />
                <div className="space-y-4">
                  <h3 className="text-lg font-medium">Contact Information</h3>
                  <div className="grid gap-4 sm:grid-cols-2">
                    <div className="space-y-2">
                      <Label htmlFor="email">{formLabels.email}</Label>
                      <Input
                        id="email"
                        name="email"
                        type="email"
                        value={formData.email}
                        onChange={handleInputChange}
                        required
                      />
                      {emailError && (
                        <p className="text-sm text-destructive">{emailError}</p>
                      )}
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="phone">{formLabels.phoneNumber}</Label>
                      <Input
                        id="phone"
                        name="phone"
                        type="tel"
                        value={formData.phone}
                        onChange={handleInputChange}
                        required
                      />
                    </div>
                  </div>
                </div>


                <div className="space-y-4">
                  <h3 className="text-lg font-medium">Location Information</h3>
                  <div className="grid gap-4 sm:grid-cols-2">
                    <div className="space-y-2">
                      <Label htmlFor="state">State</Label>
                      <Select
                        name="state"
                        value={formData.state}
                        onValueChange={(value) =>
                          handleInputChange({
                            target: { name: 'state', value }
                          } as React.ChangeEvent<HTMLSelectElement>)
                        }
                      >
                        <SelectTrigger>
                          <SelectValue placeholder="Select state" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="AL">Alabama</SelectItem>
                          <SelectItem value="AK">Alaska</SelectItem>
                          <SelectItem value="AZ">Arizona</SelectItem>
                          <SelectItem value="AR">Arkansas</SelectItem>
                          <SelectItem value="CA">California</SelectItem>
                          <SelectItem value="CO">Colorado</SelectItem>
                          <SelectItem value="CT">Connecticut</SelectItem>
                          <SelectItem value="DE">Delaware</SelectItem>
                          <SelectItem value="FL">Florida</SelectItem>
                          <SelectItem value="GA">Georgia</SelectItem>
                          <SelectItem value="HI">Hawaii</SelectItem>
                          <SelectItem value="ID">Idaho</SelectItem>
                          <SelectItem value="IL">Illinois</SelectItem>
                          <SelectItem value="IN">Indiana</SelectItem>
                          <SelectItem value="IA">Iowa</SelectItem>
                          <SelectItem value="KS">Kansas</SelectItem>
                          <SelectItem value="KY">Kentucky</SelectItem>
                          <SelectItem value="LA">Louisiana</SelectItem>
                          <SelectItem value="ME">Maine</SelectItem>
                          <SelectItem value="MD">Maryland</SelectItem>
                          <SelectItem value="MA">Massachusetts</SelectItem>
                          <SelectItem value="MI">Michigan</SelectItem>
                          <SelectItem value="MN">Minnesota</SelectItem>
                          <SelectItem value="MS">Mississippi</SelectItem>
                          <SelectItem value="MO">Missouri</SelectItem>
                          <SelectItem value="MT">Montana</SelectItem>
                          <SelectItem value="NE">Nebraska</SelectItem>
                          <SelectItem value="NV">Nevada</SelectItem>
                          <SelectItem value="NH">New Hampshire</SelectItem>
                          <SelectItem value="NJ">New Jersey</SelectItem>
                          <SelectItem value="NM">New Mexico</SelectItem>
                          <SelectItem value="NY">New York</SelectItem>
                          <SelectItem value="NC">North Carolina</SelectItem>
                          <SelectItem value="ND">North Dakota</SelectItem>
                          <SelectItem value="OH">Ohio</SelectItem>
                          <SelectItem value="OK">Oklahoma</SelectItem>
                          <SelectItem value="OR">Oregon</SelectItem>
                          <SelectItem value="PA">Pennsylvania</SelectItem>
                          <SelectItem value="RI">Rhode Island</SelectItem>
                          <SelectItem value="SC">South Carolina</SelectItem>
                          <SelectItem value="SD">South Dakota</SelectItem>
                          <SelectItem value="TN">Tennessee</SelectItem>
                          <SelectItem value="TX">Texas</SelectItem>
                          <SelectItem value="UT">Utah</SelectItem>
                          <SelectItem value="VT">Vermont</SelectItem>
                          <SelectItem value="VA">Virginia</SelectItem>
                          <SelectItem value="WA">Washington</SelectItem>
                          <SelectItem value="WV">West Virginia</SelectItem>
                          <SelectItem value="WI">Wisconsin</SelectItem>
                          <SelectItem value="WY">Wyoming</SelectItem>
                          <SelectItem value="DC">District of Columbia</SelectItem>
                          <SelectItem value="PR">Puerto Rico</SelectItem>
                          {/* Add international options for Mexican events */}
                          {locale === 'es' && (
                            <>
                              <SelectItem value="MX">Mexico</SelectItem>
                              <SelectItem value="INTL">Other International</SelectItem>
                            </>
                          )}
                        </SelectContent>
                      </Select>
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="city">City</Label>
                      <Input
                        id="city"
                        name="city"
                        value={formData.city}
                        onChange={handleInputChange}
                      />
                    </div>
                  </div>




                </div>


                {/* Coach Information */}
                <div className="space-y-4">
                  <h3 className="text-lg font-medium">Coach Information</h3>
                  <div className="grid gap-4 sm:grid-cols-2">
                    <div className="space-y-2">
                      <Label htmlFor="coach_name">{formLabels.coachName}</Label>
                      <Input
                        id="coach_name"
                        name="coach_name"
                        value={formData.coach_name}
                        onChange={handleInputChange}
                        required
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="coach_phone">{formLabels.coachPhone}</Label>
                      <Input
                        id="coach_phone"
                        name="coach_phone"
                        type="tel"
                        value={formData.coach_phone}
                        onChange={handleInputChange}
                        required
                      />
                    </div>
                  </div>
                </div>


                <div className="space-y-4">
                  <h3 className="text-lg font-medium">Fighter Record</h3>

                  {/* Muay Thai Record */}
                  <div className="space-y-2">
                    <h4 className="font-medium">Muay Thai Record</h4>
                    <div className="grid grid-cols-2 gap-4">
                      <div className="space-y-1">
                        <Label htmlFor="mt_win">Wins</Label>
                        <Input
                          id="mt_win"
                          name="mt_win"
                          type="number"
                          min="0"
                          value={formData.mt_win}
                          onChange={handleInputChange}
                        />
                      </div>
                      <div className="space-y-1">
                        <Label htmlFor="mt_loss">Losses</Label>
                        <Input
                          id="mt_loss"
                          name="mt_loss"
                          type="number"
                          min="0"
                          value={formData.mt_loss}
                          onChange={handleInputChange}
                        />
                      </div>
                    </div>
                  </div>

                  {/* Boxing Record */}
                  <div className="space-y-2">
                    <h4 className="font-medium">Boxing Record</h4>
                    <div className="grid grid-cols-2 gap-4">
                      <div className="space-y-1">
                        <Label htmlFor="boxing_win">Wins</Label>
                        <Input
                          id="boxing_win"
                          name="boxing_win"
                          type="number"
                          min="0"
                          value={formData.boxing_win}
                          onChange={handleInputChange}
                        />
                      </div>
                      <div className="space-y-1">
                        <Label htmlFor="boxing_loss">Losses</Label>
                        <Input
                          id="boxing_loss"
                          name="boxing_loss"
                          type="number"
                          min="0"
                          value={formData.boxing_loss}
                          onChange={handleInputChange}
                        />
                      </div>
                    </div>
                  </div>

                  {/* MMA Record */}
                  <div className="space-y-2">
                    <h4 className="font-medium">MMA Record</h4>
                    <div className="grid grid-cols-2 gap-4">
                      <div className="space-y-1">
                        <Label htmlFor="mma_win">Wins</Label>
                        <Input
                          id="mma_win"
                          name="mma_win"
                          type="number"
                          min="0"
                          value={formData.mma_win}
                          onChange={handleInputChange}
                        />
                      </div>
                      <div className="space-y-1">
                        <Label htmlFor="mma_loss">Losses</Label>
                        <Input
                          id="mma_loss"
                          name="mma_loss"
                          type="number"
                          min="0"
                          value={formData.mma_loss}
                          onChange={handleInputChange}
                        />
                      </div>
                    </div>
                  </div>

                  {/* Point Muay Thai Record */}
                  <div className="space-y-2">
                    <h4 className="font-medium">Point Muay Thai Record</h4>
                    <div className="grid grid-cols-2 gap-4">
                      <div className="space-y-1">
                        <Label htmlFor="pmt_win">Wins</Label>
                        <Input
                          id="pmt_win"
                          name="pmt_win"
                          type="number"
                          min="0"
                          value={formData.pmt_win}
                          onChange={handleInputChange}
                        />
                      </div>
                      <div className="space-y-1">
                        <Label htmlFor="pmt_loss">Losses</Label>
                        <Input
                          id="pmt_loss"
                          name="pmt_loss"
                          type="number"
                          min="0"
                          value={formData.pmt_loss}
                          onChange={handleInputChange}
                        />
                      </div>
                    </div>
                  </div>



                  {/* Experience Level */}
                  <div className="space-y-2">
                    <h4 className="font-medium">Experience Level</h4>
                    <div className="grid grid-cols-2 gap-4">
                      <div className="space-y-1">
                        <Label htmlFor="years_exp">Years of Experience</Label>
                        <Select
                          name="years_exp"
                          value={formData.years_exp.toString()}
                          onValueChange={(value) =>
                            handleInputChange({
                              target: { name: 'years_exp', value }
                            } as React.ChangeEvent<HTMLSelectElement>)
                          }
                        >
                          <SelectTrigger>
                            <SelectValue placeholder="Select years" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="0">{formLabels.underYear}</SelectItem>
                            <SelectItem value="1">1 Year</SelectItem>
                            <SelectItem value="2">2 Years</SelectItem>
                            <SelectItem value="3">3 Years</SelectItem>
                            <SelectItem value="4">4 Years</SelectItem>
                            <SelectItem value="5">5+ Years</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>

                    </div>
                  </div>
                </div>



                {/* Generated Fields */}
                <div className="space-y-4">
                  <h3 className="text-lg font-medium">Generated Information</h3>
                  <div className="grid gap-4 sm:grid-cols-2">


                    <div className="space-y-2">
                      <Label>Fighter ID</Label>
                      <Input
                        value={formData.fighter_id}
                        readOnly
                        className="bg-muted"
                      />
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </fieldset>
      </form>
    </LocalizationProvider>
  );
};

export default FighterForm;
