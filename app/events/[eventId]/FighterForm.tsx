// pages/components/FighterForm.tsx
// this component should create the fighter and pass to the root screen to submit to roster
'use client';

import React, { useState, useEffect } from 'react';
import { collection, query, where, getDocs, getFirestore } from 'firebase/firestore';

import { LocalizationProvider } from '@mui/x-date-pickers';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import dayjs from 'dayjs';

import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";
import { ScrollArea } from "@/components/ui/scroll-area";


interface FighterFormData {
  first: string;
  last: string;
  email: string;
  dob: string;
  gym: string;
  age: number;
  weightclass: number;
  fighterId: string;
  win: number;
  loss: number;
  gender: string;
  years_exp: number;
  other: string;
  ammy: number;
  height: number;
  heightFoot: number;
  heightInch: number;
  phone: string;
  coach_phone: string;
  coach_name: string;
}

interface FighterFormProps {
  onFormDataChange: (data: FighterFormData) => void;
  locale?: string;
}



const FighterForm: React.FC<FighterFormProps> = ({ onFormDataChange, locale }) => {

  const [emailError, setEmailError] = useState<string | null>(null);
  const [selectedDate, setSelectedDate] = useState<dayjs.Dayjs | null>(null);

  const [isWaiverChecked, setIsWaiverChecked] = useState(false);



  const [formLabels] = useState({
    returningAthletes: 'RETURNING ATHLETES',
    doubleCheckInfo: '(double check your information)',
    searchLastName: 'SEARCH BY LAST NAME',
    newAthletes: 'New Athletes can fill the Form Manually',
    firstName: 'FIRST NAME',
    lastName: 'LAST NAME',
    gym: 'GYM',
    searchingGyms: 'Searching...',
    noGymsFound: 'None found, please enter Gym Name',
    selectWeightClass: 'Select Weight Class',
    height: 'Height',
    foot: 'Foot',
    inches: 'Inches',
    selectGender: 'Select Gender',
    male: 'Male',
    female: 'Female',
    dateFormat: 'MM/DD/YYYY',
    ammateurFights: 'Number of Amateur Full contact Fights',
    yearsTraining: 'Years Training',
    underYear: 'Under a Year',
    otherExperience: locale === 'es' ? 
    'Other Experience' :  
    'Other experience (Amateur, Smokers, etc.)',
    other: 'OTHER',
    athleteEmail: 'Please enter athletes own email',
    email: 'EMAIL',
    phoneNumber: 'PHONE NUMBER',
    coachName: 'COACH NAME',
    coachPhone: 'COACH PHONE NUMBER',
    autogenerated: '(autogenerated fields below)',
    age: 'Age',
    pmtId: 'PMT ID',
    pmtScore: 'PMT Score',
    win: 'WIN',
    questions: 'Any questions? submit registration and reply to email'
  });



  const lbsToKg = (lbs: number): string => {
    const kg = lbs * 0.453592;
    return kg.toFixed(1);
  };

  const weightClasses = [
    { lbs: 60, kg: lbsToKg(60) },
    { lbs: 70, kg: lbsToKg(70) },
    { lbs: 80, kg: lbsToKg(80) },
    { lbs: 90, kg: lbsToKg(90) },
    { lbs: 100, kg: lbsToKg(100) },
    { lbs: 110, kg: lbsToKg(110) },
    { lbs: 120, kg: lbsToKg(120) },
    { lbs: 130, kg: lbsToKg(130) },
    { lbs: 140, kg: lbsToKg(140) },
    { lbs: 150, kg: lbsToKg(150) },
    { lbs: 160, kg: lbsToKg(160) },
    { lbs: 170, kg: lbsToKg(170) },
    { lbs: 180, kg: lbsToKg(180) },
    { lbs: 190, kg: lbsToKg(190) },
    { lbs: 200, kg: lbsToKg(200) },
    { lbs: 215, kg: lbsToKg(215) },
    { lbs: 230, kg: lbsToKg(230) },
    { lbs: 300, kg: lbsToKg(300) }
  ];



  const cmToFeetAndInches = (cm: number): { feet: number; inches: number } => {
    const totalInches = cm / 2.54;
    const feet = Math.floor(totalInches / 12);
    const inches = Math.round(totalInches % 12);
    return { feet, inches };
  };





  const heightOptions = {
    feet: [
      { value: 0, label: 'Foot' },
      { value: 4, label: '4 ft' },
      { value: 5, label: '5 ft' },
      { value: 6, label: '6 ft' }
    ],
    inches: Array.from({ length: 12 }, (_, i) => ({
      value: i,
      label: i.toString()
    
    })),

    centimeters: Array.from({ length: 121 }, (_, i) => i + 120).map(cm => ({  // 120cm to 240cm
      value: cm,
      label: `${cm} cm`
    }))

  };

  






  const handleDateChange = (date: dayjs.Dayjs | null) => {
    if (date) {
      const formattedDate = date.format('MM/DD/YYYY');
      setFormData({
        ...formData,
        dob: formattedDate,
        age: calculateAge(formattedDate),
        fighterId: formData.first && formData.last ? generateFighterId(formData.first, formData.last, formattedDate) : formData.fighterId,
      });
      setSelectedDate(date);
      setDobError(null);
    } else {
      setDobError("Invalid date");
    }
  };


  const [formData, setFormData] = useState<FighterFormData>({
    first: '',
    last: '',
    email: '',
    dob: '',
    gym: '',
    age: 0,
    weightclass: 0,
    fighterId: '',
    win: 0,
    loss: 0,
    gender: '',
    other: '',
    years_exp: 0,
    ammy: 0,
    height: 0,
    heightFoot: 0,
    heightInch:0,
    phone: '',
    coach_phone: '',
    coach_name: '',
  });
  const [dobError, setDobError] = useState<string | null>(null);
  const dateRegex = /^(0[1-9]|1[0-2])\/(0[1-9]|[12][0-9]|3[01])\/\d{4}$/;

  //////////////////////////////////////////////////////////////////
  /////////////////// GYM SEARCH ///////////////////////////////////////////////
  const [gymSearchTerm, setGymSearchTerm] = useState<string>('');



// Update the gym search effect in FighterForm.tsx




  



  //////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////



  //////////////////////////////////////////////////////////////////
  /////////////////// fighterId SEARCH ///////////////////////////////////////////////
  const [fighterSearchTerm, setFighterSearchTerm] = useState<string>('');
  const [fighterSearchResults, setFighterSearchResults] = useState<FighterFormData[]>([]);

  useEffect(() => {
    const fetchFighters = async () => {
      if (fighterSearchTerm.length >= 2) {
        const db = getFirestore(); 
        const profileCollections = ['records_pmt_2024', 'records_pmt_2025'];
    
        // Map over each collection and create a query
        const queries = profileCollections.map(colName => {
          const colRef = collection(db, colName);
          const fightersQuery = query(colRef, where('last', '>=', fighterSearchTerm), where('last', '<=', fighterSearchTerm + '\uf8ff'));
          return getDocs(fightersQuery);
        });
    
        try {
          // Use Promise.all to fetch all queries in parallel
          const querySnapshots = await Promise.all(queries);
          const fighters = querySnapshots.flatMap(snapshot => snapshot.docs.map(doc => {
            const data = doc.data();
            const fighterData: FighterFormData = {
            first: data.first || '',
            last: data.last || '',
            email: data.email || '',
            dob: data.dob || '',
            gym: data.gym || '',
            age: data.age || 0,
            weightclass: data.weightclass || 0,
            fighterId: data.fighterId || '',
            win: data.win || 0,
            loss: data.loss || 0,
            gender: data.gender || '',
            other: data.other || '',
            years_exp: data.yearsExp || 0,
            ammy: data.ammy || 0,
            height: data.height || 0,
            heightFoot: data.heightFoot || 0,
            heightInch: data.heightInch || 0,
            phone: data.phone || '',
            coach_phone: data.coach_phone || '',
            coach_name: data.coach_name || '',
          };
          return fighterData;
        }));
  
        setFighterSearchResults(fighters);
      } catch (error) {
        console.error("Error fetching fighters: ", error);
        setFighterSearchResults([]);
      }
    } else {
      setFighterSearchResults([]);
    }
  };

    fetchFighters();
  }, [fighterSearchTerm]);







  const handleFighterSelect = (selectedFighter: FighterFormData) => {
    const updatedFighter = {
      ...selectedFighter,
      first: selectedFighter.first.toUpperCase(),
      last: selectedFighter.last.toUpperCase(),
      dob: dayjs(selectedFighter.dob).format('MM/DD/YYYY'),
    };
    setFormData(updatedFighter);
    setSelectedDate(dayjs(selectedFighter.dob)); // Change this line
    setGymSearchTerm(updatedFighter.gym.toUpperCase());
    setFighterSearchResults([]);
  };

  //////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////

  const generateFighterId = (firstName: string, lastName: string, dob: string): string => {
    const [month, day, year] = dob.split('/');
    return `${firstName.trim().replace(/\s/g, '').toUpperCase()}${lastName.trim().replace(/\s/g, '').toUpperCase()}${day}${month}${year}`;
  };


  const calculateAge = (dob: string): number => {
    const birthDate = dayjs(dob);
    const today = dayjs();
    return today.diff(birthDate, 'year');
  };


  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    const upperCaseValue = value.toUpperCase();
  
    setFormData(currentFormData => {
      const updatedFormData: FighterFormData = { ...currentFormData };
  
      switch (name) {
        case "weightclass":
          updatedFormData.weightclass = parseInt(value, 10) || 0;
          break;
        case "age":
          updatedFormData.age = parseInt(value, 10) || 0;
          break;
        case "dob":
          updatedFormData.dob = value;
          if (dateRegex.test(value)) {
            updatedFormData.age = calculateAge(value);
            if (updatedFormData.first && updatedFormData.last) {
              updatedFormData.fighterId = generateFighterId(updatedFormData.first, updatedFormData.last, value);
            }
          } else {
            setDobError("Date must be in MM/DD/YYYY format");
          }
          break;
  
        case "email":
          updatedFormData.email = value;
          if (value.toLowerCase().includes('@example.com')) {
            setEmailError("Please enter a valid email address");
          } else {
            setEmailError(null);
          }
          break;
  
        default:
          // Type-safe way to update the field
          if (name in updatedFormData) {
            (updatedFormData[name as keyof FighterFormData] as string) = upperCaseValue;
          }
  
          if (name === 'first' || name === 'last') {
            if (updatedFormData.first && updatedFormData.last && updatedFormData.dob) {
              updatedFormData.fighterId = generateFighterId(updatedFormData.first, updatedFormData.last, updatedFormData.dob);
            }
          }
          break;
      }
  
      onFormDataChange(updatedFormData);
      return updatedFormData;
    });
  };


  React.useEffect(() => {
    onFormDataChange(formData);
  }, [formData, onFormDataChange]);


  const maxYear = dayjs().subtract(5, 'year');
  const minYear = dayjs().subtract(100, 'year');
  


  return (
    <LocalizationProvider dateAdapter={AdapterDayjs}>
      <form className="space-y-6">
        {/* Waiver Section */}
        <Card>
          <CardHeader>
            <CardTitle>Waiver and Release Agreement</CardTitle>
          </CardHeader>
          <CardContent>
            <ScrollArea className="h-[200px] rounded-md border p-4">
              {/* Waiver content */}
              <div className="space-y-4 text-sm">
              <p>
      I, the competitor named below, and/or the legal guardian of the competitor, by submitting this application, acknowledge, understand, and agree to the following:
    </p>

    <p>
      <strong>1. Assumption of Risk & Liability Release</strong><br/>
      I voluntarily participate in events organized by <strong>IKF Point Muay Thai</strong> and <strong>Point Boxing Sparring Circuit</strong>, hosted on <strong>pmt-west.app</strong> and <strong>pmtwest.org</strong>, operated by <strong>Ryan Hodges, and Rafael Mendoza, and Daniel Hodges</strong> and originally founded by <strong>Johnny Davis Enterprises DBA (AK Promotions)</strong> and recognize the continued involvement of various promoters, officials, and organizations.
    </p>

    <p>
      I fully understand and accept that participation in Muay Thai/Kickboxing and combat sports involves inherent risks, including but not limited to, 
      <strong>serious injury, permanent disability, paralysis, or death</strong>. I hereby release and discharge all individuals and entities listed above from any liability, claims, or demands arising from my participation in any event.
    </p>

    <p>
      <strong>2. Data Usage & Digital Consent</strong><br/>
      I acknowledge that my personal information, fight records, and participation details may be stored on <strong>PMT-West.app</strong>, <strong>TechBouts.com</strong> and <strong>ikffightplatform.com</strong> for event management, matchmaking, and competition records.
    </p>

    <p>
      <strong>3. Media Release & Publicity Consent</strong><br/>
      I grant <strong>IKF Point Muay Thai League, PMT-West.app, TechBouts.com</strong> full rights to use any photographs, videos, live streams, and digital media recorded at any event.
    </p>

    <p>
      <strong>4. Agreement to Rules & Conduct Policy</strong><br/>
      I agree to abide by all <strong>official Muay Thai League rules and regulations</strong>. I acknowledge that any misconduct may result in penalties, disqualification, or suspension from future events.
    </p>

    <p>
      <strong>5. Medical & Insurance Responsibility</strong><br/>
      I affirm that I am <strong>physically and mentally fit</strong> to participate and have adequate medical insurance coverage.
    </p>

    <p>
      <strong>6. Identification & Eligibility</strong><br/>
      I understand that a valid birth certificate or government-issued ID may be required to compete.
    </p>

    <p>
      <strong>7. Refund Policy</strong><br/>
      I agree that any registration fees or ticket sales are <strong>non-refundable</strong>, unless the event is canceled.
    </p>

    <p>
  <strong>8. Parent/Guardian Consent for Minors</strong><br/>
  If the competitor is under the age of 18, a **parent or legal guardian must sign this waiver** on their behalf. 
  By checking the box below and submitting this form, the parent or legal guardian acknowledges that they have read, understood, and agreed to all terms stated in this waiver 
  and accept full responsibility for the minors participation in the event.
</p>
              </div>
            </ScrollArea>
            
            <div className="mt-4 flex items-center space-x-2">
              <Checkbox 
                id="waiver" 
                checked={isWaiverChecked}
                onCheckedChange={(checked) => setIsWaiverChecked(checked as boolean)}
              />
              <Label htmlFor="waiver" className="text-sm">
                I have read and agree to the waiver
                <br />
                <span className="text-xs text-muted-foreground">
                  (If the competitor is under 18, a parent or legal guardian must agree on their behalf.)
                </span>
              </Label>
            </div>
          </CardContent>
        </Card>
  
        <fieldset disabled={!isWaiverChecked} className="space-y-6">
          {/* Returning Fighter Search */}
          <Card>
            <CardHeader>
              <CardTitle>{formLabels.returningAthletes}</CardTitle>
              <CardDescription>{formLabels.doubleCheckInfo}</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="fighterSearch">{formLabels.searchLastName}</Label>
                  <Input
                    id="fighterSearch"
                    value={fighterSearchTerm.toUpperCase()}
                    onChange={(e) => {
                      const value = e.target.value.toUpperCase();
                      setFighterSearchTerm(value);
                      if (value.length < 3) setFighterSearchResults([]);
                    }}
                    placeholder="Search by last name..."
                  />
                </div>
  
                {fighterSearchResults.length > 0 && (
                  <ScrollArea className="h-[200px] rounded-md border">
                    <div className="p-4">
                      {fighterSearchResults.map((fighter, index) => (
                        <Button
                          key={index}
                          variant="ghost"
                          className="w-full justify-start"
                          onClick={() => handleFighterSelect(fighter)}
                        >
                          {fighter.first} {fighter.last} Age: {fighter.age}
                        </Button>
                      ))}
                    </div>
                  </ScrollArea>
                )}
              </div>
            </CardContent>
          </Card>
  
          {/* New Fighter Form */}
          <Card>
            <CardHeader>
              <CardTitle>New Fighter Registration</CardTitle>
              <CardDescription>{formLabels.newAthletes}</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid gap-6">
                {/* Personal Information */}
                <div className="grid gap-4 sm:grid-cols-2">
                  <div className="space-y-2">
                    <Label htmlFor="first">{formLabels.firstName}</Label>
                    <Input
                      id="first"
                      name="first"
                      value={formData.first.toUpperCase()}
                      onChange={handleInputChange}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="last">{formLabels.lastName}</Label>
                    <Input
                      id="last"
                      name="last"
                      value={formData.last.toUpperCase()}
                      onChange={handleInputChange}
                    />
                  </div>
                </div>
  
                {/* Gym Information */}
                <div className="space-y-2">
                  <Label htmlFor="gym">{formLabels.gym}</Label>
                  <Input
                    id="gym"
                    name="gym"
                    value={gymSearchTerm}
                    onChange={handleInputChange}
                    required
                  />
                </div>
  
                {/* Weight and Height */}
                <div className="grid gap-4 sm:grid-cols-2">
                  <div className="space-y-2">
                    <Label>{formLabels.selectWeightClass}</Label>
                    <Select
                      name="weightclass"
                      value={formData.weightclass.toString()}
                      onValueChange={(value) => 
                        handleInputChange({
                          target: { name: 'weightclass', value }
                        } as React.ChangeEvent<HTMLSelectElement>)
                      }
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select weight class" />
                      </SelectTrigger>
                      <SelectContent>
                        {weightClasses.map(({ lbs, kg }) => (
                          <SelectItem key={lbs} value={lbs.toString()}>
                            {locale === 'es' ? `${lbs} lbs (${kg} kg)` : `${lbs} lbs`}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
  
                  {/* Height Selection */}
                  <div className="space-y-2">
                    <Label>{formLabels.height}</Label>
                    <div className="flex space-x-2">
                      {locale === 'es' ? (
                        <Select
                          name="heightCm"
                          value={(formData.heightFoot * 30.48 + formData.heightInch * 2.54).toFixed(0)}
                          onValueChange={(value) => {
                            const cm = parseInt(value);
                            const { feet, inches } = cmToFeetAndInches(cm);
                            handleInputChange({
                              target: { name: 'heightFoot', value: feet.toString() }
                            } as React.ChangeEvent<HTMLInputElement>);
                            handleInputChange({
                              target: { name: 'heightInch', value: inches.toString() }
                            } as React.ChangeEvent<HTMLInputElement>);
                          }}
                        >
                          <SelectTrigger>
                            <SelectValue placeholder="Select height" />
                          </SelectTrigger>
                          <SelectContent>
                            {heightOptions.centimeters.map(({ value, label }) => (
                              <SelectItem key={value} value={value.toString()}>
                                {label}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      ) : (
                        <>
                          <Select
                            name="heightFoot"
                            value={formData.heightFoot.toString()}
                            onValueChange={(value) => 
                              handleInputChange({
                                target: { name: 'heightFoot', value }
                              } as React.ChangeEvent<HTMLSelectElement>)
                            }
                          >
                            <SelectTrigger className="w-[110px]">
                              <SelectValue placeholder="Feet" />
                            </SelectTrigger>
                            <SelectContent>
                              {heightOptions.feet.map(({ value, label }) => (
                                <SelectItem key={value} value={value.toString()}>
                                  {label}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
  
                          <Select
                            name="heightInch"
                            value={formData.heightInch.toString()}
                            onValueChange={(value) => 
                              handleInputChange({
                                target: { name: 'heightInch', value }
                              } as React.ChangeEvent<HTMLSelectElement>)
                            }
                          >
                            <SelectTrigger className="w-[110px]">
                              <SelectValue placeholder="Inches" />
                            </SelectTrigger>
                            <SelectContent>
                              {heightOptions.inches.map(({ value }) => (
                                <SelectItem key={value} value={value.toString()}>
                                  {value}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                        </>
                      )}
                    </div>
                  </div>
                </div>
  
                {/* Date of Birth and Gender */}
                <div className="grid gap-4 sm:grid-cols-2">
                  <div className="space-y-2">
                    <Label>Date of Birth</Label>
                    <DatePicker
                      value={selectedDate}
                      onChange={handleDateChange}
                      minDate={minYear}
                      maxDate={maxYear}
                      slotProps={{
                        textField: {
                          sx: {
                            width: '100%',
                            '& .MuiInputBase-root': {
                              borderRadius: '0.375rem',
                            },
                          },
                        },
                      }}
                    />
                    {dobError && (
                      <p className="text-sm text-destructive">{dobError}</p>
                    )}
                  </div>
  
                  <div className="space-y-2">
                    <Label>{formLabels.selectGender}</Label>
                    <Select
                      name="gender"
                      value={formData.gender}
                      onValueChange={(value) => 
                        handleInputChange({
                          target: { name: 'gender', value }
                        } as React.ChangeEvent<HTMLSelectElement>)
                      }
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select gender" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="MALE">{formLabels.male}</SelectItem>
                        <SelectItem value="FEMALE">{formLabels.female}</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
  
                {/* Contact Information */}
                <Separator />
                <div className="space-y-4">
                  <h3 className="text-lg font-medium">Contact Information</h3>
                  <div className="grid gap-4 sm:grid-cols-2">
                    <div className="space-y-2">
                      <Label htmlFor="email">{formLabels.email}</Label>
                      <Input
                        id="email"
                        name="email"
                        type="email"
                        value={formData.email}
                        onChange={handleInputChange}
                        required
                      />
                      {emailError && (
                        <p className="text-sm text-destructive">{emailError}</p>
                      )}
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="phone">{formLabels.phoneNumber}</Label>
                      <Input
                        id="phone"
                        name="phone"
                        type="tel"
                        value={formData.phone}
                        onChange={handleInputChange}
                        required
                      />
                    </div>
                  </div>
                </div>
  
                {/* Coach Information */}
                <div className="space-y-4">
                  <h3 className="text-lg font-medium">Coach Information</h3>
                  <div className="grid gap-4 sm:grid-cols-2">
                    <div className="space-y-2">
                      <Label htmlFor="coach_name">{formLabels.coachName}</Label>
                      <Input
                        id="coach_name"
                        name="coach_name"
                        value={formData.coach_name}
                        onChange={handleInputChange}
                        required
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="coach_phone">{formLabels.coachPhone}</Label>
                      <Input
                        id="coach_phone"
                        name="coach_phone"
                        type="tel"
                        value={formData.coach_phone}
                        onChange={handleInputChange}
                        required
                      />
                    </div>
                  </div>
                </div>
  
                {/* Generated Fields */}
                <div className="space-y-4">
                  <h3 className="text-lg font-medium">Generated Information</h3>
                  <div className="grid gap-4 sm:grid-cols-2">
                    <div className="space-y-2">
                      <Label>Age</Label>
                      <div className="text-2xl font-bold">{formData.age}</div>
                    </div>
                    <div className="space-y-2">
                      <Label>Fighter ID</Label>
                      <Input
                        value={formData.fighterId}
                        readOnly
                        className="bg-muted"
                      />
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </fieldset>
      </form>
    </LocalizationProvider>
  );
};

export default FighterForm;
